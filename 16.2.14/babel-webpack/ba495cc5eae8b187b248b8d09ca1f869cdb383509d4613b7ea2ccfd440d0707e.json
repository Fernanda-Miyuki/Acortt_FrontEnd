{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    // Guarda a URL que o usuário tentou acessar antes de ser redirecionado para o login\n    this.redirectUrl = null;\n  }\n  register(user) {\n    return this.http.post('http://localhost:3000/register', user);\n  }\n  login(credentials) {\n    return this.http.post('http://localhost:3000/login', credentials);\n  }\n  logout() {\n    // Limpa o token de autenticação armazenado no localStorage\n    localStorage.removeItem('token');\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return token !== null && token !== undefined;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","redirectUrl","register","user","post","login","credentials","logout","localStorage","removeItem","isAuthenticated","token","getItem","undefined","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/fernanda/Área de Trabalho/acortt/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  // Guarda a URL que o usuário tentou acessar antes de ser redirecionado para o login\n  redirectUrl: string | null = null;\n\n  constructor(private http: HttpClient) { }\n\n  register(user: any): Observable<any> {\n    return this.http.post<any>('http://localhost:3000/register', user);\n  }\n\n  login(credentials: { email: string, senha: string }): Observable<any> {\n    return this.http.post<any>('http://localhost:3000/login', credentials);\n  }\n\n  logout(): void {\n    // Limpa o token de autenticação armazenado no localStorage\n    localStorage.removeItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    return token !== null && token !== undefined;\n  }\n}"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB;IACA,KAAAC,WAAW,GAAkB,IAAI;EAEO;EAExCC,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,gCAAgC,EAAED,IAAI,CAAC;EACpE;EAEAE,KAAKA,CAACC,WAA6C;IACjD,OAAO,IAAI,CAACN,IAAI,CAACI,IAAI,CAAM,6BAA6B,EAAEE,WAAW,CAAC;EACxE;EAEAC,MAAMA,CAAA;IACJ;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,eAAeA,CAAA;IACb,MAAMC,KAAK,GAAGH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOD,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS;EAC9C;EAAC,QAAAC,CAAA,G;qBAtBUhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}